#!/bin/bash
# Get iOS Simulator coordinates for UI elements
# Calculates absolute screen coordinates based on window position and UI layout

set -e

# Get simulator window position
read -r WINDOW_X WINDOW_Y < <(osascript -e '
tell application "System Events" to tell process "Simulator"
    set {x, y} to position of window 1
    return x & " " & y
end tell
' | tr -d ',' | tr -s ' ')

# Get simulator window size
read -r WINDOW_WIDTH WINDOW_HEIGHT < <(osascript -e '
tell application "System Events" to tell process "Simulator"
    set {w, h} to size of window 1
    return w & " " & h
end tell
' | tr -d ',' | tr -s ' ')

echo "=== Simulator Window Position ==="
echo "Origin: ($WINDOW_X, $WINDOW_Y)"
echo "Size: ${WINDOW_WIDTH}x${WINDOW_HEIGHT}"
echo ""

# Digital Bloom UI element offsets (relative to device viewport)
# These are approximate and based on the layout in index.html + style.css

# Toolbar container: top-0 left-0 right-0 (full width at top)
# Toolbar has dynamic padding based on safe-area-inset-top
# In portrait: padding-top = calc(0.5rem + env(safe-area-inset-top))
# Safe area on iPhone 16 Pro simulator ≈ 47px
# 0.5rem = 8px
# Total padding-top ≈ 55px

TOOLBAR_TOP_OFFSET=55  # Approximate top padding
TOOLBAR_LEFT_MARGIN=16  # Toolbar has px-4 (1rem = 16px)

# Mode buttons layout:
# - Row of 7 buttons
# - Each button: 56x56px with gap-2 (8px) between them
# - Button positions (center points):

BUTTON_SIZE=56
BUTTON_GAP=8
BUTTON_Y=$((TOOLBAR_TOP_OFFSET + BUTTON_SIZE / 2))  # Center of button vertically

# Calculate X positions for each mode button (0-indexed, left-to-right)
function get_button_x() {
    local button_index=$1
    echo $((TOOLBAR_LEFT_MARGIN + (button_index * (BUTTON_SIZE + BUTTON_GAP)) + BUTTON_SIZE / 2))
}

# Mode buttons (based on index.html order):
# 0: Vine, 1: Gravity, 2: Bounce, 3: Burst, 4: Lightning, 5: Constellation, 6: Vortex
VINE_X=$(get_button_x 0)
GRAVITY_X=$(get_button_x 1)
BOUNCE_X=$(get_button_x 2)
BURST_X=$(get_button_x 3)
LIGHTNING_X=$(get_button_x 4)
CONSTELLATION_X=$(get_button_x 5)
VORTEX_X=$(get_button_x 6)

# Settings cog (top-right)
SETTINGS_X=$((WINDOW_WIDTH - 56))  # Approximate, depends on device width
SETTINGS_Y=$BUTTON_Y

# Bottom bar (collapsed by default)
BOTTOM_BAR_Y=$((WINDOW_HEIGHT - 100))  # Approximate

echo "=== UI Element Coordinates (Device-Relative) ==="
echo "Toolbar top offset: ${TOOLBAR_TOP_OFFSET}px"
echo ""
echo "Mode Buttons (y=${BUTTON_Y}):"
echo "  Vine: (${VINE_X}, ${BUTTON_Y})"
echo "  Gravity: (${GRAVITY_X}, ${BUTTON_Y})"
echo "  Bounce: (${BOUNCE_X}, ${BUTTON_Y})"
echo "  Burst: (${BURST_X}, ${BUTTON_Y})"
echo "  Lightning: (${LIGHTNING_X}, ${BUTTON_Y})"
echo "  Constellation: (${CONSTELLATION_X}, ${BUTTON_Y})"
echo "  Vortex: (${VORTEX_X}, ${BUTTON_Y})"
echo ""
echo "Settings Cog: (${SETTINGS_X}, ${SETTINGS_Y})"
echo ""

# Convert to absolute screen coordinates
function to_absolute() {
    local device_x=$1
    local device_y=$2
    local abs_x=$((WINDOW_X + device_x))
    local abs_y=$((WINDOW_Y + device_y))
    echo "$abs_x $abs_y"
}

echo "=== Absolute Screen Coordinates (for cliclick) ==="
echo "Mode Buttons:"
read -r ax ay < <(to_absolute $VINE_X $BUTTON_Y)
echo "  Vine: cliclick c:${ax},${ay}"
read -r ax ay < <(to_absolute $GRAVITY_X $BUTTON_Y)
echo "  Gravity: cliclick c:${ax},${ay}"
read -r ax ay < <(to_absolute $BOUNCE_X $BUTTON_Y)
echo "  Bounce: cliclick c:${ax},${ay}"
read -r ax ay < <(to_absolute $BURST_X $BUTTON_Y)
echo "  Burst: cliclick c:${ax},${ay}"
read -r ax ay < <(to_absolute $LIGHTNING_X $BUTTON_Y)
echo "  Lightning: cliclick c:${ax},${ay}"
read -r ax ay < <(to_absolute $CONSTELLATION_X $BUTTON_Y)
echo "  Constellation: cliclick c:${ax},${ay}"
read -r ax ay < <(to_absolute $VORTEX_X $BUTTON_Y)
echo "  Vortex: cliclick c:${ax},${ay}"
echo ""

# Export coordinates to file for use by test scripts
cat > /tmp/simulator-coords.sh <<EOF
# Simulator window coordinates (generated by get-simulator-coords.sh)
WINDOW_X=$WINDOW_X
WINDOW_Y=$WINDOW_Y
WINDOW_WIDTH=$WINDOW_WIDTH
WINDOW_HEIGHT=$WINDOW_HEIGHT

# Absolute screen coordinates for cliclick
$(to_absolute $VINE_X $BUTTON_Y | awk '{print "VINE_CLICK=\"c:" $1 "," $2 "\""}')
$(to_absolute $GRAVITY_X $BUTTON_Y | awk '{print "GRAVITY_CLICK=\"c:" $1 "," $2 "\""}')
$(to_absolute $BOUNCE_X $BUTTON_Y | awk '{print "BOUNCE_CLICK=\"c:" $1 "," $2 "\""}')
$(to_absolute $BURST_X $BUTTON_Y | awk '{print "BURST_CLICK=\"c:" $1 "," $2 "\""}')
$(to_absolute $LIGHTNING_X $BUTTON_Y | awk '{print "LIGHTNING_CLICK=\"c:" $1 "," $2 "\""}')
$(to_absolute $CONSTELLATION_X $BUTTON_Y | awk '{print "CONSTELLATION_CLICK=\"c:" $1 "," $2 "\""}')
$(to_absolute $VORTEX_X $BUTTON_Y | awk '{print "VORTEX_CLICK=\"c:" $1 "," $2 "\""}')
$(to_absolute $SETTINGS_X $SETTINGS_Y | awk '{print "SETTINGS_CLICK=\"c:" $1 "," $2 "\""}')
EOF

echo "Coordinates exported to /tmp/simulator-coords.sh"
echo "Usage: source /tmp/simulator-coords.sh && cliclick \$VINE_CLICK"
